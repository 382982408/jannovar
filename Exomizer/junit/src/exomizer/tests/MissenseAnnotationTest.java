package exomizer.tests;


import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;

import java.util.ArrayList;
import java.util.HashMap;

/* serialization */
import java.io.ObjectInputStream;
import java.io.FileInputStream;
import java.io.IOException;


import exomizer.io.UCSCKGParser;
import exomizer.common.Constants;
import exomizer.io.AnnovarParser;
import exomizer.reference.KnownGene;
import exomizer.reference.Chromosome;
import exomizer.reference.Annotation;
import exomizer.exome.Variant;
import exomizer.exception.AnnotationException;


import org.junit.Test;
import org.junit.BeforeClass;
import junit.framework.Assert;


/**
 * This class is intended to perform unuit testing on variants that
 * are nonsynonymous SNVs. 
 */
public class MissenseAnnotationTest implements Constants {

    private static HashMap<Byte,Chromosome> chromosomeMap = null;

    @SuppressWarnings (value="unchecked")
    @BeforeClass 
    public static void setUp() throws IOException {
	HashMap<String,KnownGene> kgMap=null;
	// The following file must be created prior to running this test
	String serializedFile = "../ucsc.ser";
	try {
	     FileInputStream fileIn =
		 new FileInputStream(serializedFile);
	     ObjectInputStream in = new ObjectInputStream(fileIn);
	     kgMap = (HashMap<String,KnownGene>) in.readObject();
            in.close();
            fileIn.close();
	} catch(IOException i) {
            i.printStackTrace();
	    System.err.println("Could not deserialize knownGeneMap");
	    System.exit(1);
           
        } catch(ClassNotFoundException c) {
            System.out.println("Could not find HashMap<String,KnownGene> class.");
            c.printStackTrace();
            System.exit(1);
        }
	chromosomeMap = new HashMap<Byte,Chromosome> ();
	for (KnownGene kgl : kgMap.values()) {
	    byte chrom = kgl.getChromosome();
	    if (! chromosomeMap.containsKey(chrom)) {
		Chromosome chr = new Chromosome(chrom);
		chromosomeMap.put(chrom,chr);
	    }
	    Chromosome c = chromosomeMap.get(chrom);
	    c.addGene(kgl);	
	}
    }

     /**
     * The variant is
     *<P>
     *  17	73221527	73221527	G	A
     *<P>
     * annovar's annotation is MISSENSE
    	NUP85:uc010wrv.1:exon8:c.G685A:p.A229T,NUP85:uc002jng.1:exon9:c.G823A:p.A275T
     * This one was done by hand, the following test cases
     * were generated by a perl script.
     */
    @Test public void testMissenseVarA() throws AnnotationException  {
	byte chr = 17;
	int pos = 73221527;
	String ref = "G";
	String alt = "A";
	Chromosome c = chromosomeMap.get(chr); 
	if (c==null) {
	    Assert.fail("Could not identify chromosome \"" + chr + "\"");
	} else {
	    Annotation ann = c.getAnnotation(pos,ref,alt);
	    byte varType = ann.getVarType();
	    Assert.assertEquals(MISSENSE,varType);
	    String geneSymbol = ann.getGeneSymbol();
	    Assert.assertEquals("NUP85",geneSymbol);
	    String annot = ann.getVariantAnnotation();
	    Assert.assertEquals("NUP85:uc010wrv.1:exon8:c.685G>A:p.A229T,NUP85:uc002jng.1:exon9:c.823G>A:p.A275T",annot);
	}
    }

 /**
     * The variant is
     *<P>
     * 	17	46688256	46688256	T	C
     *<P>
     * annovar's annotation is MISSENSE
    	 HOXB7:uc002inv.3:exon1:c.25A>G:p.T9A,
     * This one was done by hand, the following test cases
     * were generated by a perl script.
     */
    @Test public void testMissenseVarB() throws AnnotationException  {
	byte chr = 17;
	int pos = 46688256;
	String ref = "T";
	String alt = "C";
	Chromosome c = chromosomeMap.get(chr); 
	if (c==null) {
	    Assert.fail("Could not identify chromosome \"" + chr + "\"");
	} else {
	    Annotation ann = c.getAnnotation(pos,ref,alt);
	    byte varType = ann.getVarType();
	    Assert.assertEquals(MISSENSE,varType);
	    String geneSymbol = ann.getGeneSymbol();
	    Assert.assertEquals("NUP85",geneSymbol);
	    String annot = ann.getVariantAnnotation();
	    Assert.assertEquals("HOXB7:uc002inv.3:exon1:c.25A>G:p.T9A",annot);
	}
    }






}